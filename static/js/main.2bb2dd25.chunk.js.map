{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["soundMap","keyCode","keyTrigger","id","url","DrumSound","props","state","display","playSound","bind","handleKeyPress","document","addEventListener","this","removeEventListener","e","getElementById","keyTrig","play","dispClip","idClip","onClick","className","src","clip","React","Component","BackArrow","href","DrumMachine","displayClip","name","setState","Pad","map","item","i","mappedArr","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","URL","process","origin","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.2bb2dd25.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\n\r\nconst soundMap = [{\r\n  keyCode: 81,\r\n  keyTrigger: 'Q',\r\n  id: 'Speech',\r\n  url: 'https://res.cloudinary.com/brunosra/video/upload/v1536638793/r2d2/mp3/speech1.mp3'\r\n}, {\r\n  keyCode: 87,\r\n  keyTrigger: 'W',\r\n  id: 'Surprise',\r\n  url: 'https://res.cloudinary.com/brunosra/video/upload/v1536638793/r2d2/mp3/surprise.mp3'\r\n}, {\r\n  keyCode: 69,\r\n  keyTrigger: 'E',\r\n  id: 'Wow',\r\n  url: 'https://res.cloudinary.com/brunosra/video/upload/v1536638793/r2d2/mp3/wow.mp3'\r\n}, {\r\n  keyCode: 65,\r\n  keyTrigger: 'A',\r\n  id: 'Zweep',\r\n  url: 'https://res.cloudinary.com/brunosra/video/upload/v1536638793/r2d2/mp3/zweep.mp3'\r\n}, {\r\n  keyCode: 83,\r\n  keyTrigger: 'S',\r\n  id: 'ZeepZeep',\r\n  url: 'https://res.cloudinary.com/brunosra/video/upload/v1536638793/r2d2/mp3/zeepzeep.mp3'\r\n}, {\r\n  keyCode: 68,\r\n  keyTrigger: 'D',\r\n  id: 'Moving',\r\n  url: 'https://res.cloudinary.com/brunosra/video/upload/v1536638793/r2d2/mp3/moving.mp3'\r\n}, {\r\n  keyCode: 90,\r\n  keyTrigger: 'Z',\r\n  id: 'Laughter',\r\n  url: 'https://res.cloudinary.com/brunosra/video/upload/v1536638793/r2d2/mp3/laughter.mp3'\r\n}, {\r\n  keyCode: 88,\r\n  keyTrigger: 'X',\r\n  id: 'Alarmed',\r\n  url: 'https://res.cloudinary.com/brunosra/video/upload/v1536638792/r2d2/mp3/alarmed.mp3'\r\n}, {\r\n  keyCode: 67,\r\n  keyTrigger: 'C',\r\n  id: 'Chatter',\r\n  url: 'https://res.cloudinary.com/brunosra/video/upload/v1536638792/r2d2/mp3/chatter.mp3'\r\n}];\r\n\r\n\r\nclass DrumSound extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      display: 'kn.'\r\n    }\r\n    this.playSound=this.playSound.bind(this);\r\n    this.handleKeyPress=this.handleKeyPress.bind(this);\r\n  }\r\n  componentDidMount() {\r\n    document.addEventListener('keydown', this.handleKeyPress);\r\n  }\r\n  componentWillUnmount() {\r\n    document.removeEventListener('keydown', this.handleKeyPress);\r\n  }\r\n  handleKeyPress(e) {\r\n    if (e.keyCode === this.props.keyCode) {\r\n      this.playSound();\r\n    }\r\n  }\r\n  playSound(e) {\r\n    const sound = document.getElementById(this.props.keyTrig);\r\n    sound.play();\r\n    this.props.dispClip(this.props.idClip);\r\n  }\r\n  render() {\r\n    return (\r\n      <div id={this.props.idClip}\r\n           onClick={this.playSound}\r\n           className=\"drum-pad\">\r\n            <audio id={this.props.keyTrig} className=\"clip\" src={this.props.clip}></audio>\r\n           {this.props.keyTrig}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst BackArrow = () => {\r\n  return (\r\n    <div id=\"backwards\">\r\n      <div><h2><a href=\"http://ahaf-dev.com\"><i className=\"fa fa-backward\"/>  ahaf-dev</a></h2></div>\r\n    </div>\r\n  )\r\n}\r\n\r\nclass DrumMachine extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      display: \"Clip\"\r\n    }\r\n    this.displayClip=this.displayClip.bind(this);\r\n  }\r\n  displayClip(name) {\r\n    this.setState({\r\n      display: name\r\n    });\r\n  }\r\n  render() {\r\n    let Pad;\r\n    Pad=soundMap.map((item, i, mappedArr) => {\r\n      return (\r\n       <DrumSound idClip={mappedArr[i].id}\r\n                  clip={mappedArr[i].url}\r\n                  keyTrig={mappedArr[i].keyTrigger}\r\n                  keyCode={mappedArr[i].keyCode}\r\n                  dispClip={this.displayClip}/>\r\n       )\r\n    });\r\n    return (\r\n      <div id=\"content\">\r\n        <div id=\"pad\">\r\n          <h1>Drum Machine</h1>\r\n          {Pad}\r\n          <p id=\"display\" className=\"btn btn-primary\">\r\n            {this.state.display}\r\n          </p>\r\n        </div>\r\n        <p>Photo by Matthijs Smit on Unsplash</p>\r\n        <BackArrow />\r\n      </div>\r\n\r\n    )\r\n  }\r\n}\r\n\r\nexport default DrumMachine;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport DrumMachine from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<DrumMachine />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}