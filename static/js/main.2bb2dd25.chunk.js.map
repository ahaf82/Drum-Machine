{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["soundMap","keyCode","keyTrigger","id","url","DrumSound","props","state","display","playSound","bind","handleKeyPress","document","addEventListener","this","removeEventListener","e","getElementById","keyTrig","play","dispClip","idClip","onClick","className","src","clip","React","Component","BackArrow","href","DrumMachine","displayClip","name","setState","Pad","map","item","i","mappedArr","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","URL","process","origin","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.2bb2dd25.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nconst soundMap = [{\n  keyCode: 81,\n  keyTrigger: 'Q',\n  id: 'Speech',\n  url: 'https://res.cloudinary.com/brunosra/video/upload/v1536638793/r2d2/mp3/speech1.mp3'\n}, {\n  keyCode: 87,\n  keyTrigger: 'W',\n  id: 'Surprise',\n  url: 'https://res.cloudinary.com/brunosra/video/upload/v1536638793/r2d2/mp3/surprise.mp3'\n}, {\n  keyCode: 69,\n  keyTrigger: 'E',\n  id: 'Wow',\n  url: 'https://res.cloudinary.com/brunosra/video/upload/v1536638793/r2d2/mp3/wow.mp3'\n}, {\n  keyCode: 65,\n  keyTrigger: 'A',\n  id: 'Zweep',\n  url: 'https://res.cloudinary.com/brunosra/video/upload/v1536638793/r2d2/mp3/zweep.mp3'\n}, {\n  keyCode: 83,\n  keyTrigger: 'S',\n  id: 'ZeepZeep',\n  url: 'https://res.cloudinary.com/brunosra/video/upload/v1536638793/r2d2/mp3/zeepzeep.mp3'\n}, {\n  keyCode: 68,\n  keyTrigger: 'D',\n  id: 'Moving',\n  url: 'https://res.cloudinary.com/brunosra/video/upload/v1536638793/r2d2/mp3/moving.mp3'\n}, {\n  keyCode: 90,\n  keyTrigger: 'Z',\n  id: 'Laughter',\n  url: 'https://res.cloudinary.com/brunosra/video/upload/v1536638793/r2d2/mp3/laughter.mp3'\n}, {\n  keyCode: 88,\n  keyTrigger: 'X',\n  id: 'Alarmed',\n  url: 'https://res.cloudinary.com/brunosra/video/upload/v1536638792/r2d2/mp3/alarmed.mp3'\n}, {\n  keyCode: 67,\n  keyTrigger: 'C',\n  id: 'Chatter',\n  url: 'https://res.cloudinary.com/brunosra/video/upload/v1536638792/r2d2/mp3/chatter.mp3'\n}];\n\n\nclass DrumSound extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      display: 'kn.'\n    }\n    this.playSound=this.playSound.bind(this);\n    this.handleKeyPress=this.handleKeyPress.bind(this);\n  }\n  componentDidMount() {\n    document.addEventListener('keydown', this.handleKeyPress);\n  }\n  componentWillUnmount() {\n    document.removeEventListener('keydown', this.handleKeyPress);\n  }\n  handleKeyPress(e) {\n    if (e.keyCode === this.props.keyCode) {\n      this.playSound();\n    }\n  }\n  playSound(e) {\n    const sound = document.getElementById(this.props.keyTrig);\n    sound.play();\n    this.props.dispClip(this.props.idClip);\n  }\n  render() {\n    return (\n      <div id={this.props.idClip}\n           onClick={this.playSound}\n           className=\"drum-pad\">\n            <audio id={this.props.keyTrig} className=\"clip\" src={this.props.clip}></audio>\n           {this.props.keyTrig}\n      </div>\n    )\n  }\n}\n\nconst BackArrow = () => {\n  return (\n    <div id=\"backwards\">\n      <div><h2><a href=\"http://ahaf-dev.com\"><i className=\"fa fa-backward\"/>  ahaf-dev</a></h2></div>\n    </div>\n  )\n}\n\nclass DrumMachine extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      display: \"Clip\"\n    }\n    this.displayClip=this.displayClip.bind(this);\n  }\n  displayClip(name) {\n    this.setState({\n      display: name\n    });\n  }\n  render() {\n    let Pad;\n    Pad=soundMap.map((item, i, mappedArr) => {\n      return (\n       <DrumSound idClip={mappedArr[i].id}\n                  clip={mappedArr[i].url}\n                  keyTrig={mappedArr[i].keyTrigger}\n                  keyCode={mappedArr[i].keyCode}\n                  dispClip={this.displayClip}/>\n       )\n    });\n    return (\n      <div id=\"content\">\n        <div id=\"pad\">\n          <h1>Drum Machine</h1>\n          {Pad}\n          <p id=\"display\" className=\"btn btn-primary\">\n            {this.state.display}\n          </p>\n        </div>\n        <p>Photo by Matthijs Smit on Unsplash</p>\n        <BackArrow />\n      </div>\n\n    )\n  }\n}\n\nexport default DrumMachine;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport DrumMachine from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<DrumMachine />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}